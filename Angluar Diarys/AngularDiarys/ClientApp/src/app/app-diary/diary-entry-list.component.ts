import { Component, OnInit } from '@angular/core';
import { DiaryEntryService } from './diary-entry.service';
import { DiaryEntry } from './diaryEntry.model';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';

@Component({
  selector: 'app-diary-entry-list',
  templateUrl: './diary-entry-list.component.html',
  styleUrls: ['./diary-entry-list.component.css']
})
export class DiaryEntryListComponent implements OnInit {
  diaryEntries: DiaryEntry[]; // Array to store diary entries
  diaryEntryForm: FormGroup; // Form group for the diary entry form
  searchTerm: string = '';

  constructor(
    private diaryEntryService: DiaryEntryService, // Service for fetching diary entries
    private formBuilder: FormBuilder // FormBuilder for creating the diary entry form
  ) { }

  ngOnInit() {
    this.diaryEntryForm = this.formBuilder.group({
      title: ['', Validators.required], // Form control for the title input with required validation
      content: ['', Validators.required] // Form control for the content textarea with required validation
    });

    this.fetchDiaryEntries(); // Fetch diary entries on component initialization
  }

  fetchDiaryEntries() {
    this.diaryEntryService.getDiaryEntries().subscribe(entries => {
      this.diaryEntries = entries; // Assign the fetched diary entries to the component property
    });
  }

  onSubmit() {
    if (this.diaryEntryForm.invalid) {
      return; // If the form is invalid, do not proceed
    }

    const newEntry: DiaryEntry = {
      id: 0, // Set the ID to 0 (assuming it will be generated by the server)
      userId: this.getIpAddress(), // Set the user ID to the user's IP address
      title: this.diaryEntryForm.value.title, // Get the title value from the form
      content: this.diaryEntryForm.value.content, // Get the content value from the form
      creationTime: new Date() // Set the creation time to the current date and time
    };

    this.diaryEntryService.addDiaryEntry(newEntry).subscribe(entry => {
      this.diaryEntries.push(entry); // Add the newly created entry to the diaryEntries array
      this.diaryEntryForm.reset(); // Reset the form to its initial state
    });
  }

  deleteDiaryEntry(id: number) {
    this.diaryEntryService.deleteDiaryEntry(id).subscribe(() => {
      this.diaryEntries = this.diaryEntries.filter(entry => entry.id !== id); // Remove the deleted entry from the diaryEntries array
    });
  }

  private getIpAddress(): string {
    return window.location.origin; // Get the user's IP address from the window location
  }

  get filteredEntries(): DiaryEntry[] {
    if (!this.diaryEntries) {
      return [];
    }

    // Convert the search term to lowercase for case-insensitive matching
    const searchTermLower = this.searchTerm.toLowerCase();

    // Filter the diary entries based on the search term
    return this.diaryEntries.filter(entry =>
      entry.content.toLowerCase().includes(searchTermLower)
    );
  }

  copyToClipboard(entry: DiaryEntry) {
    const copyText = `Title: ${entry.title}\nDate: ${entry.creationTime}\nContent: ${entry.content}`;

    navigator.clipboard.writeText(copyText).then(function () {
      console.log('Copying to clipboard was successful!');
    }, function (err) {
      console.error('Could not copy text: ', err);
    });
  }


}
